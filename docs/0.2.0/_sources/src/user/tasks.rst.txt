.. _`tasks`:

Supported Tasks
====================================================================

Each task has an associated a *Dataset Format*, a *Query Format* and a *Prediction Format*.

A task's *Dataset Format* specifies the format of the dataset files.
Datasets are prepared by *Application Developers* when they create *Train Jobs*
and received by *Model Developers* when they define :meth:`rafiki.model.BaseModel.train` and :meth:`rafiki.model.BaseModel.evaluate`.

A task's *Query Format* specifies the format of queries when they are passed to models. 
Queries are generated by *Application Users* when they send queries to *Inference Jobs* 
and received by *Model Developers* when they define :meth:`rafiki.model.BaseModel.predict`.

A task's *Prediction Format* specifies the format of predictions made by models. 
Predictions are generated by *Model Developers* when they define :meth:`rafiki.model.BaseModel.predict`
and received by *Application Users* as predictions to their queries sent to *Inference Jobs*.


IMAGE_CLASSIFICATION
--------------------------------------------------------------------

Dataset Format
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The dataset file must be of the ``.zip`` archive format with a ``images.csv`` at the root of the directory.

The ``images.csv`` should be of a `.CSV <https://en.wikipedia.org/wiki/Comma-separated_values>`_
format with 2 columns of ``path`` and ``class``.

For each row,

    ``path`` should be a file path to a ``.png``, ``.jpg`` or ``.jpeg`` image file within the archive, relative to the root of the directory.
    All images in the train & validation datasets should have the **same** dimensions ``W x H``.

    ``class`` should be an integer from ``0`` to ``k - 1``, where ``k`` is the number of classes in the classification of images.

An example of ``images.csv`` follows:

.. code-block:: text

    path,class
    image-0-of-class-0.png,0
    image-1-of-class-0.png,0
    ...
    image-0-of-class-1.png,1
    ...
    image-99-of-class-9.png,9

Additionally, the train & validation dataset's images should be have the same dimensions ``W x H``.

Query Format 
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

A ``W x H`` 2D list representing a grayscale version of the query image. 

Prediction Format 
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

A size-``k`` list of floats, representing the probabilities of each class from ``0`` to ``k - 1``.


POS_TAGGING
--------------------------------------------------------------------

Dataset Format
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The dataset file must be of the ``.zip`` archive format with a ``corpus.tsv`` at the root of the directory.

The ``corpus.tsv`` should be of a `.TSV <https://en.wikipedia.org/wiki/Tab-separated_values>`_ 
format with 2 columns: ``token`` and ``tag``.

For each row,

    ``token`` should be a string, a token (e.g. word) in the corpus. 
    These tokens should appear in the order as it is in the text of the corpus.
    To delimit sentences, ``token`` takes the value of ``\n``.

    The other ``tag`` column are integers from ``0`` to ``k - 1``, where ``k`` is the total number of POS tags,
    with each ``tag`` describing the POS tag of the corresponding token.

An example of ``corpus.tsv`` for follows:

.. code-block:: text

    token       tag
    Two         3
    leading     2
    ...
    line-item   1
    veto        5
    .           4
    \n          0
    Professors  6
    Philip      6
    ...
    previous    1
    presidents  8   
    .           4
    \n          0

Query Format 
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

A list of strings representing a sentence as a list of tokens in that sentence.

Prediction Format 
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

A list of integers representing the list of predicted tag for each token, in sequence, for the sentence.
